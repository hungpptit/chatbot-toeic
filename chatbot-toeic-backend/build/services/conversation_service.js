import { initDb } from '../models/index.js'; // d√πng initDb ƒë√∫ng c√°ch

let db;
try {
  db = await initDb(); // ƒë·∫£m b·∫£o DB ƒë√£ kh·ªüi t·∫°o
} catch (err) {
  console.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o DB:", err);
}
const Conversation = db?.Conversation;
const Message = db?.Message;

/**
 * T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
 * @param {Object} data - { userId, title }
 */
const createConversation = async ({
  userId,
  title
}) => {
  try {
    console.log("üõ† Creating conversation with:", {
      userId,
      title
    });
    if (!Conversation || typeof Conversation.create !== 'function') {
      throw new Error('Model Conversation ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng');
    }
    const newConversation = await Conversation.create({
      userId,
      title,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    return {
      code: 201,
      message: "T·∫°o cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng",
      data: newConversation
    };
  } catch (error) {
    console.error("L·ªói t·∫°o conversation:", error);
    return {
      code: 500,
      message: "L·ªói server khi t·∫°o cu·ªôc tr√≤ chuy·ªán"
    };
  }
};

/**
 * L·∫•y danh s√°ch conversation theo userId
 */
const getConversationsByUser = async userId => {
  try {
    const conversations = await Conversation.findAll({
      where: {
        userId
      },
      order: [['updatedAt', 'DESC']]
    });
    return {
      code: 200,
      message: "L·∫•y danh s√°ch conversation th√†nh c√¥ng",
      data: conversations
    };
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch conversation:", error);
    return {
      code: 500,
      message: "L·ªói server khi l·∫•y danh s√°ch"
    };
  }
};

/**
 * L·∫•y 1 conversation theo id, ch·ªâ n·∫øu user l√† ch·ªß s·ªü h·ªØu
 * @param {number} id - ID c·ªßa conversation
 * @param {number} userId - ID c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
 */
const getConversationById = async (id, userId) => {
  try {
    const conversation = await Conversation.findByPk(id, {
      include: [{
        model: Message,
        as: 'messages',
        // alias ph·∫£i kh·ªõp v·ªõi association trong model
        attributes: ['id', 'role', 'content', 'createdAt'],
        order: [['createdAt', 'ASC']]
      }]
    });
    if (!conversation) {
      return {
        code: 404,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán"
      };
    }

    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (conversation.userId !== userId) {
      return {
        code: 403,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem cu·ªôc tr√≤ chuy·ªán n√†y"
      };
    }
    return {
      code: 200,
      message: "L·∫•y cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng",
      data: conversation
    };
  } catch (error) {
    console.error("L·ªói l·∫•y conversation:", error);
    return {
      code: 500,
      message: "L·ªói server khi l·∫•y cu·ªôc tr√≤ chuy·ªán"
    };
  }
};

/**
 * X√≥a m·ªôt conversation theo id
 * @param {number} id - ID c·ªßa cu·ªôc tr√≤ chuy·ªán c·∫ßn x√≥a
 */
const deleteConversation = async (id, userId) => {
  try {
    const conversation = await Conversation.findByPk(id);
    if (!conversation) {
      return {
        code: 404,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán"
      };
    }
    if (conversation.userId !== userId) {
      return {
        code: 403,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a cu·ªôc tr√≤ chuy·ªán n√†y"
      };
    }
    await Conversation.destroy({
      where: {
        id
      }
    });
    return {
      code: 200,
      message: "X√≥a cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng"
    };
  } catch (error) {
    console.error("L·ªói x√≥a conversation:", error);
    return {
      code: 500,
      message: "L·ªói server khi x√≥a cu·ªôc tr√≤ chuy·ªán"
    };
  }
};

/**
 * C·∫≠p nh·∫≠t t√™n (title) c·ªßa conversation theo id
 * @param {number} id - ID c·ªßa cu·ªôc tr√≤ chuy·ªán
 * @param {string} newTitle - Ti√™u ƒë·ªÅ m·ªõi
 */
const updateConversationTitle = async (id, newTitle, userId) => {
  try {
    const conversation = await Conversation.findByPk(id);
    if (!conversation) {
      return {
        code: 404,
        message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán"
      };
    }
    if (conversation.userId !== userId) {
      return {
        code: 403,
        message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a cu·ªôc tr√≤ chuy·ªán n√†y"
      };
    }
    conversation.title = newTitle;
    conversation.updatedAt = new Date();
    await conversation.save();
    return {
      code: 200,
      message: "C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ th√†nh c√¥ng",
      data: conversation
    };
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t title conversation:", error);
    return {
      code: 500,
      message: "L·ªói server khi c·∫≠p nh·∫≠t ti√™u ƒë·ªÅ"
    };
  }
};
export { createConversation, getConversationsByUser, getConversationById, deleteConversation, updateConversationTitle };