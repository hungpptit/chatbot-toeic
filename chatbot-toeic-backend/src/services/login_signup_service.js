import db from '../models/index.js';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import nodemailer from 'nodemailer';

const User = db.User;
const SECRET_KEY = process.env.JWT_SECRET_KEY;
const otpStore = new Map(); // C√≥ th·ªÉ thay b·∫±ng Redis

function generateOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

async function sendOTP(email, subject, message) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: email,
    subject,
    text: message,
  });
}

// ====== AUTH SERVICE ======

 const register = async ({ username, email, password }) => {
  const existingUser = await User.findOne({ where: { email } });
  if (existingUser) return { code: 400, message: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i" };

  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = await User.create({
    username,
    email,
    password: hashedPassword,
    role_id: 1,
  });

  return {
    code: 201,
    message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
    data: {
      id: newUser.id,
      username: newUser.username,
      email: newUser.email,
      role_id: newUser.role_id,
    },
  };
};

const login = async ({ email, password }) => {
  const user = await User.findOne({ where: { email } });
  if (!user) {
    return { code: 404, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" };
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return { code: 401, message: "Sai m·∫≠t kh·∫©u" };
  }

  const token = jwt.sign(
    { id: user.id, email: user.email, role_id: user.role_id },
    SECRET_KEY,
    { expiresIn: '1d' }
  );

  return {
    code: 200,
    message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
    token, // <-- ch·ªâ ƒë·ªÉ controller d√πng
    data: {
      id: user.id,
      username: user.username,
      email: user.email,
      role_id: user.role_id,
    },
  };
};

 const getUserFromToken = async (token) => {
  try {
    const decoded = jwt.verify(token, SECRET_KEY);
    const user = await User.findByPk(decoded.id);
    if (!user) return { code: 404, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" };

    return {
      code: 200,
      message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: {
        id: user.id,
        username: user.username,
        email: user.email,
        role_id: user.role_id,
      },
    };
  } catch {
    return { code: 401, message: "Token kh√¥ng h·ª£p l·ªá" };
  }
};

 const sendForgotPasswordOtp = async (email) => {
  const user = await User.findOne({ where: { email } });
  if (!user) return { code: 404, message: "Email kh√¥ng t·ªìn t·∫°i" };

  const otp = generateOTP();
  otpStore.set(email, { otp, expiresAt: Date.now() + 5 * 60 * 1000 });

  await sendOTP(email, "OTP - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u", `M√£ OTP c·ªßa b·∫°n l√†: ${otp} (h·∫øt h·∫°n sau 5 ph√∫t).`);
  return { code: 200, message: "‚úÖ ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email" };
};

 const resetPassword = async ({ email, otp, newPassword }) => {
  const entry = otpStore.get(email);
  if (!entry || entry.otp !== otp) return { code: 400, message: "OTP kh√¥ng h·ª£p l·ªá" };
  if (Date.now() > entry.expiresAt) {
    otpStore.delete(email);
    return { code: 400, message: "OTP ƒë√£ h·∫øt h·∫°n" };
  }

  const hashedPassword = await bcrypt.hash(newPassword, 10);
  await User.update({ password: hashedPassword }, { where: { email } });
  otpStore.delete(email);

  return { code: 200, message: "‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" };
};

 const sendRegisterOtp = async (email) => {
  const existingUser = await User.findOne({ where: { email } });
  if (existingUser) return { code: 400, message: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" };

  const otp = generateOTP();
  otpStore.set(email, { otp, expiresAt: Date.now() + 5 * 60 * 1000 });

  await sendOTP(email, "X√°c th·ª±c ƒëƒÉng k√Ω t√†i kho·∫£n", `M√£ OTP x√°c th·ª±c ƒëƒÉng k√Ω c·ªßa b·∫°n l√†: ${otp} (h·∫øt h·∫°n sau 5 ph√∫t).`);
  return { code: 200, message: "üì© OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email" };
};

 const verifyRegisterOtp = async ({ email, otp, name, password }) => {
  const entry = otpStore.get(email);
  if (!entry || entry.otp !== otp) return { code: 400, message: "OTP kh√¥ng h·ª£p l·ªá" };
  if (Date.now() > entry.expiresAt) {
    otpStore.delete(email);
    return { code: 400, message: "OTP ƒë√£ h·∫øt h·∫°n" };
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = await User.create({ username: name, email, password: hashedPassword, role_id: 1 });

  otpStore.delete(email);

  return {
    code: 201,
    message: "‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng",
    data: {
      id: newUser.id,
      username: newUser.username,
      email: newUser.email,
      role_id: newUser.role_id,
    },
  };
};

export {
  register,
  login,
  getUserFromToken,
  sendForgotPasswordOtp,
  resetPassword,
  sendRegisterOtp,
  verifyRegisterOtp,
};