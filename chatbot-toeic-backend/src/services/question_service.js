import db from '../models/index.js';
import { GEMINI_API_KEYS, GEMINI_API_URL } from '../config.js';
import axios from 'axios';
import {getMessagesForGemini } from './message_service.js';

const { Question, Vocabulary, Synonym, Antonym } = db;

// üîÅ G·ªçi Gemini v·ªõi fallback API key
const callGemini = async (contents) => {
  for (const apiKey of GEMINI_API_KEYS) {
    try {
      const res = await axios.post(GEMINI_API_URL, {
        contents, // G·ª≠i tr·ª±c ti·∫øp m·∫£ng contents
      }, {
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': apiKey,
        },
      });

      const text = res.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
      if (text) return text;
    } catch (err) {
      console.warn(`‚ö†Ô∏è Gemini key failed (${apiKey}):`, err.response?.status || err.message);
    }
  }

  throw new Error('‚ùå All Gemini API keys failed');
};

// üì• Ph√¢n t√≠ch input th√¥ th√†nh object
// üì• Ph√¢n t√≠ch input th√¥ th√†nh object
const parseUserInput = async (rawText, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);

  const prompt = `
B·∫°n l√† tr·ª£ l√Ω tr√≠ch xu·∫•t d·ªØ li·ªáu luy·ªán thi TOEIC. Chu·ªói ƒë·∫ßu v√†o b√™n d∆∞·ªõi c√≥ th·ªÉ ch·ª©a m·ªôt ho·∫∑c nhi·ªÅu c√¢u h·ªèi. Nhi·ªám v·ª•:
‚úÖ N·∫øu c√≥ nhi·ªÅu c√¢u h·ªèi ‚Üí h√£y t√°ch v√† ph√¢n t√≠ch t·ª´ng c√¢u, tr·∫£ v·ªÅ m·∫£ng JSON g·ªìm c√°c object c√≥ d·∫°ng:

{
  "type": "MultipleChoice",
  "questionText": "With the help of ...",
  "options": {
    "A": "recover",
    "B": "recovers",
    "C": "recovering",
    "D": "recovered"
  }
}

‚úÖ N·∫øu l√† t·ª´ v·ª±ng ‚Üí type = "Vocabulary-Lookup" v√† word = "..."

‚úÖ N·∫øu l√† c√¢u h·ªèi t·ª± do ‚Üí type = "Free" v√† questionText = "..."

‚ùóKh√¥ng bao quanh k·∫øt qu·∫£ b·∫±ng \`\`\` ho·∫∑c ch√∫ th√≠ch g√¨ c·∫£. Tr·∫£ v·ªÅ JSON thu·∫ßn.

L·ªãch s·ª≠ h·ªôi tho·∫°i:
${JSON.stringify(history)}

D·ªØ li·ªáu m·ªõi:
"""${rawText}"""
`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
  const cleaned = reply.replace(/```json|```/g, "").trim();

  try {
    const parsed = JSON.parse(cleaned);
    return Array.isArray(parsed) ? parsed : [parsed]; // lu√¥n tr·∫£ v·ªÅ m·∫£ng
  } catch (err) {
    console.warn("‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c JSON t·ª´ AI:", reply);
    throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu");
  }
};


// üéØ Ph√¢n lo·∫°i c√¢u h·ªèi tr·∫Øc nghi·ªám
const detectQuestionType = async (questionText, options, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ph√¢n lo·∫°i c√¢u h·ªèi ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ h·ªôi tho·∫°i v√† c√¢u h·ªèi m·ªõi, h√£y x√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi:
- "Vocabulary" n·∫øu l√† v·ªÅ t·ª´ v·ª±ng.
- "Grammar" n·∫øu l√† v·ªÅ ng·ªØ ph√°p.
- "Free" n·∫øu l√† c√¢u h·ªèi t·ª± do kh√¥ng tr·∫Øc nghi·ªám.

L·ªãch s·ª≠:
${JSON.stringify(history)}
C√¢u h·ªèi m·ªõi: ${questionText}
A. ${options?.A || '...'}
B. ${options?.B || '...'}
C. ${options?.C || '...'}
D. ${options?.D || '...'}

Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng m·ªôt t·ª´: Vocabulary / Grammar / Free`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
  const lower = reply.toLowerCase();

  if (lower.includes('vocabulary')) return 'Vocabulary';
  if (lower.includes('grammar')) return 'Part 5';
  return 'Free';
};

// üìå T·ª± do
const askFreeQuestion = async (questionText, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ h·ªôi tho·∫°i v√† c√¢u h·ªèi m·ªõi, tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát:\nL·ªãch s·ª≠:\n${JSON.stringify(history)}\nC√¢u h·ªèi m·ªõi:\n"${questionText}"`;
  return await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
};

// üß† Tr·∫Øc nghi·ªám
const askWithLocalAI = async (questionText, options, type = 'Part 5', conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);
  const intro =
    type === 'Vocabulary'
      ? 'B·∫°n l√† tr·ª£ l√Ω luy·ªán t·ª´ v·ª±ng ti·∫øng Anh. H√£y ch·ªçn ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát.'
      : 'B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. H√£y ch·ªçn ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát.';

  const prompt = `${intro}

L·ªãch s·ª≠:
${JSON.stringify(history)}
C√¢u h·ªèi: ${questionText}
A. ${options.A}
B. ${options.B}
C. ${options.C}
D. ${options.D}

‚ö†Ô∏è B·∫Øt bu·ªôc ƒë√∫ng ƒë·ªãnh d·∫°ng sau:
ƒê√°p √°n: A/B/C/D
Gi·∫£i th√≠ch: <gi·∫£i th√≠ch ng·∫Øn b·∫±ng ti·∫øng Vi·ªát>

Ch·ªâ in k·∫øt qu·∫£, kh√¥ng th√™m g√¨ kh√°c.`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));

  // ü™ì C·∫Øt reply th√†nh nhi·ªÅu block n·∫øu Gemini tr·∫£ v·ªÅ nhi·ªÅu ph·∫ßn
  const blocks = reply.split(/(?:‚ùì|C√¢u h·ªèi[:Ôºö]?)/).map(b => b.trim()).filter(Boolean);

  for (const block of blocks) {
    const answerMatch = block.match(/ƒê√°p √°n[:Ôºö]?\s*([A-D])/i);
    const explanationMatch = block.match(/Gi·∫£i th√≠ch[:Ôºö]?\s*([\s\S]*?)(?:\nƒê√°p √°n:|\n?$)/i);

    if (answerMatch) {
      return {
        answer: answerMatch[1].toUpperCase(),
        explanation: explanationMatch?.[1]?.trim() || '',
      };
    }
  }

  // ‚ùå Fallback n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ƒë√°p √°n ƒë√∫ng
  console.warn('‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ƒë√∫ng t·ª´ reply:', reply);
  return {
    answer: 'D',
    explanation: reply.trim(),
  };
};


// üìò T·ª´ v·ª±ng
const askVocabularyAI = async (word, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);
  const prompt = `B·∫°n l√† tr·ª£ l√Ω t·ª´ v·ª±ng ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ h·ªôi tho·∫°i v√† t·ª´ c·∫ßn ph√¢n t√≠ch:\nL·ªãch s·ª≠:\n${JSON.stringify(history)}\nT·ª´: "${word}", h√£y tr·∫£ l·ªùi v·ªõi ƒë·ªãnh d·∫°ng sau:

ƒê·ªãnh nghƒ©a: <gi·∫£i th√≠ch b·∫±ng ti·∫øng Anh>
V√≠ d·ª•: <c√¢u ti·∫øng Anh s·ª≠ d·ª•ng t·ª´ ƒë√≥>
ƒê·ªìng nghƒ©a: <3 t·ª´ c√°ch nhau b·ªüi d·∫•u ph·∫©y>
Tr√°i nghƒ©a: <3 t·ª´ c√°ch nhau b·ªüi d·∫•u ph·∫©y>

Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng ƒë·ªãnh d·∫°ng tr√™n, kh√¥ng th√™m g√¨ kh√°c.`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
  console.log('üß™ Gemini AI raw reply:', reply);

  return {
    definition: reply.match(/ƒê·ªãnh nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.trim() || null,
    example: reply.match(/V√≠ d·ª•[:Ôºö]?\s*(.+)/i)?.[1]?.trim() || null,
    synonyms: reply.match(/ƒê·ªìng nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.split(/,\s*/).filter(Boolean) || [],
    antonyms: reply.match(/Tr√°i nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.split(/,\s*/).filter(Boolean) || [],
  };
};

// üáªüá≥ Gi·∫£i th√≠ch nghƒ©a ti·∫øng Vi·ªát
const askVietnameseExplanation = async (word, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† l·ªãch s·ª≠ h·ªôi tho·∫°i v√† t·ª´ c·∫ßn gi·∫£i th√≠ch:\nL·ªãch s·ª≠:\n${JSON.stringify(history)}\nT·ª´: "${word}", h√£y gi·∫£i th√≠ch nghƒ©a b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu.`;
  return await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
};

// üîÅ H√†m ch√≠nh g·ªëc
const getItemWithAI = async ({ type, questionText, options, word }, conversationId) => {
  if (!type && questionText && !options && !word) {
    return {
      type: 'Free',
      source: 'ai',
      answer: await askFreeQuestion(questionText, conversationId),
    };
  }

  if (type === 'Vocabulary-Lookup') {
    let vocab = await Vocabulary.findOne({ where: { word } });
    let source = 'database';

    if (!vocab) {
      source = 'ai';
      const aiData = await askVocabularyAI(word, conversationId);
      if (!aiData?.definition) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ AI');

      vocab = await Vocabulary.create({
        word,
        definition: aiData.definition,
        example: aiData.example,
        topic: 'general',
      });

      for (const s of aiData.synonyms) await Synonym.create({ vocabId: vocab.id, synonym: s });
      for (const a of aiData.antonyms) await Antonym.create({ vocabId: vocab.id, antonym: a });
    }

    const full = await Vocabulary.findOne({
      where: { id: vocab.id },
      include: [
        { model: Synonym, as: 'synonyms' },
        { model: Antonym, as: 'antonyms' },
      ],
    });

    const viExplanation = await askVietnameseExplanation(word, conversationId);
    return { source, vocab: full, viExplanation };
  }

  if (!type && questionText && options) {
    type = await detectQuestionType(questionText, options, conversationId);
  }

  if (type === 'Free') {
    return {
      type: 'Free',
      source: 'ai',
      answer: await askFreeQuestion(questionText, conversationId),
    };
  }

  const existing = await Question.findOne({ where: { question: questionText } });
  if (existing) return { source: 'database', question: existing };

  const aiResult = await askWithLocalAI(questionText, options, type, conversationId);
  const { questionType, part } = await classifyTypeAndPart(questionText, options, conversationId);
  const { typeId, partId } = await findOrCreateTypeAndPart(questionType, part);

  const newQuestion = await Question.create({
    question: questionText,
    optionA: options.A,
    optionB: options.B,
    optionC: options.C,
    optionD: options.D,
    correctAnswer: aiResult.answer,
    explanation: aiResult.explanation,
    type,
    topic: type === 'Vocabulary' ? 'Vocabulary' : 'General',
    typeId,
    partId,
  });

  // üîç L·∫•y ho·∫∑c t·∫°o course "AI-Test"
  const [aiCourse] = await db.Course.findOrCreate({
    where: { name: 'AI-Test' },
  });

  // üìö L·∫•y test g·∫ßn nh·∫•t trong AI-Test course
  const tests = await db.Test.findAll({
    include: [{
      model: db.Course,
      where: { id: aiCourse.id },
      through: { attributes: [] }
    }],
    order: [['id', 'DESC']]
  });

  let testToUse = null;
  let currentCount = 0;

  for (const test of tests) {
    const count = await db.TestQuestion.count({ where: { testId: test.id } });
    if (count < 40) {
      testToUse = test;
      currentCount = count;
      break;
    }
  }

  // üì¶ N·∫øu kh√¥ng c√≤n test ph√π h·ª£p th√¨ t·∫°o m·ªõi
  if (!testToUse) {
    testToUse = await db.Test.create({
      title: `AI Test - ${new Date().toLocaleString('en-GB').replace(/[/,:\s]/g, '-')}`,
      duration: 600,
      participants: 0,
      comments: 0,
    });

    await db.Test_Courses.create({
      testId: testToUse.id,
      courseId: aiCourse.id,
    });
  }

  // ‚ûï Th√™m c√¢u h·ªèi v√†o Test
  await db.TestQuestion.create({
    testId: testToUse.id,
    questionId: newQuestion.id,
    sortOrder: currentCount + 1,
  });


  return {
    source: 'ai',
    questionId: newQuestion.id,
    testId: testToUse.id,
    courseId: aiCourse.id,
    typeId,
    partId,
    question: newQuestion,
  };
};

const parseUserInputMulti = async (rawText, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);

  const prompt = `B·∫°n l√† tr·ª£ l√Ω tr√≠ch xu·∫•t d·ªØ li·ªáu c√¢u h·ªèi ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† chu·ªói ƒë·∫ßu v√†o ch·ª©a nhi·ªÅu c√¢u h·ªèi, h√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON g·ªìm c√°c object c√≥ ƒë·ªãnh d·∫°ng nh∆∞ sau:

[
  {
    "type": "MultipleChoice",
    "questionText": "...",
    "options": {
      "A": "...",
      "B": "...",
      "C": "...",
      "D": "..."
    }
  },
  {
    "type": "MultipleChoice",
    "questionText": "...",
    "options": { ... }
  }
]

Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, kh√¥ng markdown hay gi·∫£i th√≠ch. N·∫øu m·ªôt d√≤ng kh√¥ng ƒë·ªß d·ªØ li·ªáu th√¨ b·ªè qua.

L·ªãch s·ª≠ h·ªôi tho·∫°i: ${JSON.stringify(history)}
Chu·ªói m·ªõi:
"""${rawText}"""`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
  const cleaned = reply.replace(/```json|```/g, "").trim();

  try {
    const parsed = JSON.parse(cleaned);
    if (!Array.isArray(parsed)) throw new Error("Kh√¥ng ph·∫£i m·∫£ng");
    return parsed;
  } catch (err) {
    console.warn("‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c m·∫£ng JSON t·ª´ AI:", reply);
    throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t danh s√°ch c√¢u h·ªèi");
  }
};


// üí° H√†m m·ªõi: x·ª≠ l√Ω t·ª´ chu·ªói th√¥ b·∫•t k·ª≥
const getSmartItem = async (rawText, conversationId) => {
  const items = await parseUserInputMulti(rawText, conversationId);
  const results = [];

  for (const item of items) {
    try {
      const result = await getItemWithAI(item, conversationId);
      results.push(result);
    } catch (err) {
      console.warn(`‚ùå L·ªói khi x·ª≠ l√Ω item:\n${JSON.stringify(item)}\n`, err.message);
    }
  }

  return results;
};


const classifyTypeAndPart = async (questionText, options, conversationId) => {
  const { data: history } = await getMessagesForGemini(conversationId);

  const prompt = `
B·∫°n l√† tr·ª£ l√Ω ph√¢n lo·∫°i c√¢u h·ªèi ti·∫øng Anh. D∆∞·ªõi ƒë√¢y l√† m·ªôt c√¢u h·ªèi m·ªõi.
H√£y x√°c ƒë·ªãnh:
- "questionType": M·ªôt trong c√°c lo·∫°i sau: Multiple Choice, Fill in the Blank, Matching, Rearrangement, True/False, Short Answer
- "part": M·ªôt ph·∫ßn trong b√†i thi TOEIC nh∆∞ Part 1, Part 2, Part 5, v.v.

Tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng sau (kh√¥ng ghi ch√∫ ho·∫∑c markdown):
{
  "questionType": "Multiple Choice",
  "part": "Part 5"
}

L·ªãch s·ª≠ h·ªôi tho·∫°i: ${JSON.stringify(history)}
C√¢u h·ªèi: ${questionText}
A. ${options?.A || ''}
B. ${options?.B || ''}
C. ${options?.C || ''}
D. ${options?.D || ''}
`;

  const reply = await callGemini(history.concat({ role: "user", parts: [{ text: prompt }] }));
  const cleaned = reply.replace(/```json|```/g, "").trim();

  try {
    return JSON.parse(cleaned);
  } catch (err) {
    console.warn("‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c JSON t·ª´ AI:", reply);
    throw new Error("Kh√¥ng th·ªÉ ph√¢n lo·∫°i c√¢u h·ªèi");
  }
};

const findOrCreateTypeAndPart = async (questionTypeName, partName) => {
  const [type] = await db.QuestionType.findOrCreate({
    where: { name: questionTypeName },
    defaults: { description: '' },
  });

  const [part] = await db.Part.findOrCreate({
    where: { name: partName },
  });

  return { typeId: type.id, partId: part.id };
};




export { getItemWithAI, getSmartItem };