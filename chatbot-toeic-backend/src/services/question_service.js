import db from '../models/index.js';
import { GEMINI_API_KEYS, GEMINI_API_URL } from '../config.js';
import axios from 'axios';

const { Question, Vocabulary, Synonym, Antonym } = db;

// üîÅ G·ªçi Gemini v·ªõi fallback API key
const callGemini = async (prompt) => {
  for (const apiKey of GEMINI_API_KEYS) {
    try {
      const res = await axios.post(GEMINI_API_URL, {
        contents: [{ parts: [{ text: prompt }] }],
      }, {
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': apiKey,
        },
      });

      const text = res.data.candidates?.[0]?.content?.parts?.[0]?.text?.trim();
      if (text) return text;
    } catch (err) {
      console.warn(`‚ö†Ô∏è Gemini key failed (${apiKey}):`, err.response?.status || err.message);
    }
  }

  throw new Error('‚ùå All Gemini API keys failed');
};

// üéØ Ph√¢n lo·∫°i c√¢u h·ªèi
const detectQuestionType = async (questionText, options) => {
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ph√¢n lo·∫°i c√¢u h·ªèi ti·∫øng Anh. H√£y x√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi sau:
- "Vocabulary" n·∫øu l√† v·ªÅ t·ª´ v·ª±ng.
- "Grammar" n·∫øu l√† v·ªÅ ng·ªØ ph√°p.
- "Free" n·∫øu l√† c√¢u h·ªèi t·ª± do kh√¥ng tr·∫Øc nghi·ªám.

C√¢u h·ªèi: ${questionText}
A. ${options?.A || '...'}
B. ${options?.B || '...'}
C. ${options?.C || '...'}
D. ${options?.D || '...'}

Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng m·ªôt t·ª´: Vocabulary / Grammar / Free`;

  const reply = await callGemini(prompt);
  const lower = reply.toLowerCase();

  if (lower.includes('vocabulary')) return 'Vocabulary';
  if (lower.includes('grammar')) return 'Part 5';
  return 'Free';
};

// üìå T·ª± do
const askFreeQuestion = async (questionText) => {
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† r√µ r√†ng b·∫±ng ti·∫øng Vi·ªát cho c√¢u h·ªèi sau:\n"${questionText}"`;
  return await callGemini(prompt);
};

// üß† Tr·∫Øc nghi·ªám
const askWithLocalAI = async (questionText, options, type = 'Part 5') => {
  const intro =
    type === 'Vocabulary'
      ? 'B·∫°n l√† tr·ª£ l√Ω luy·ªán t·ª´ v·ª±ng ti·∫øng Anh. H√£y ch·ªçn ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát.'
      : 'B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. H√£y ch·ªçn ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát.';

  const prompt = `${intro}

C√¢u h·ªèi: ${questionText}
A. ${options.A}
B. ${options.B}
C. ${options.C}
D. ${options.D}

‚ö†Ô∏è B·∫Øt bu·ªôc ƒë√∫ng ƒë·ªãnh d·∫°ng sau:
ƒê√°p √°n: A/B/C/D
Gi·∫£i th√≠ch: <gi·∫£i th√≠ch ng·∫Øn b·∫±ng ti·∫øng Vi·ªát>

Ch·ªâ in k·∫øt qu·∫£, kh√¥ng th√™m g√¨ kh√°c.`;

  const reply = await callGemini(prompt);
  const answerMatch = reply.match(/ƒê√°p √°n[:Ôºö]?\s*([A-D])/i);
  const explanationMatch = reply.match(/Gi·∫£i th√≠ch[:Ôºö]?\s*([\s\S]*)/i);

  return {
    answer: answerMatch?.[1]?.toUpperCase() || 'D',
    explanation: explanationMatch?.[1]?.trim() || reply.trim(),
  };
};

// üìò T·ª´ v·ª±ng
const askVocabularyAI = async (word) => {
  const prompt = `B·∫°n l√† tr·ª£ l√Ω t·ª´ v·ª±ng ti·∫øng Anh. V·ªõi t·ª´ "${word}", h√£y tr·∫£ l·ªùi v·ªõi ƒë·ªãnh d·∫°ng sau:

ƒê·ªãnh nghƒ©a: <gi·∫£i th√≠ch b·∫±ng ti·∫øng Anh>
V√≠ d·ª•: <c√¢u ti·∫øng Anh s·ª≠ d·ª•ng t·ª´ ƒë√≥>
ƒê·ªìng nghƒ©a: <3 t·ª´ c√°ch nhau b·ªüi d·∫•u ph·∫©y>
Tr√°i nghƒ©a: <3 t·ª´ c√°ch nhau b·ªüi d·∫•u ph·∫©y>

Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng ƒë·ªãnh d·∫°ng tr√™n, kh√¥ng th√™m g√¨ kh√°c.`;

  const reply = await callGemini(prompt);
  console.log('üß™ Gemini AI raw reply:', reply);

  return {
    definition: reply.match(/ƒê·ªãnh nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.trim() || null,
    example: reply.match(/V√≠ d·ª•[:Ôºö]?\s*(.+)/i)?.[1]?.trim() || null,
    synonyms: reply.match(/ƒê·ªìng nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.split(/,\s*/).filter(Boolean) || [],
    antonyms: reply.match(/Tr√°i nghƒ©a[:Ôºö]?\s*(.+)/i)?.[1]?.split(/,\s*/).filter(Boolean) || [],
  };
};

// üáªüá≥ Gi·∫£i th√≠ch ti·∫øng Vi·ªát (d√πng lu√¥n AI)
const askVietnameseExplanation = async (word) => {
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. H√£y gi·∫£i th√≠ch nghƒ©a c·ªßa t·ª´ "${word}" b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch ƒë∆°n gi·∫£n v√† d·ªÖ hi·ªÉu.`;
  return await callGemini(prompt);
};

// üîÅ H√†m ch√≠nh
const getItemWithAI = async ({ type, questionText, options, word }) => {
  // üü© T·ª± do
  if (!type && questionText && !options && !word) {
    return {
      type: 'Free',
      source: 'ai',
      answer: await askFreeQuestion(questionText),
    };
  }

  // üü® T·ª´ v·ª±ng
  if (type === 'Vocabulary-Lookup') {
    let vocab = await Vocabulary.findOne({ where: { word } });
    let source = 'database';

    if (!vocab) {
      source = 'ai';
      const aiData = await askVocabularyAI(word);
      if (!aiData?.definition) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ AI');

      vocab = await Vocabulary.create({
        word,
        definition: aiData.definition,
        example: aiData.example,
        topic: 'general',
      });

      for (const s of aiData.synonyms) await Synonym.create({ vocabId: vocab.id, synonym: s });
      for (const a of aiData.antonyms) await Antonym.create({ vocabId: vocab.id, antonym: a });
    }

    const full = await Vocabulary.findOne({
      where: { id: vocab.id },
      include: [
        { model: Synonym, as: 'synonyms' },
        { model: Antonym, as: 'antonyms' },
      ],
    });

    const viExplanation = await askVietnameseExplanation(word);

    return { source, vocab: full, viExplanation };
  }

  // üü• Tr·∫Øc nghi·ªám
  if (!type && questionText && options) {
    type = await detectQuestionType(questionText, options);
  }

  if (type === 'Free') {
    return {
      type: 'Free',
      source: 'ai',
      answer: await askFreeQuestion(questionText),
    };
  }

  const existing = await Question.findOne({ where: { question: questionText } });
  if (existing) return { source: 'database', question: existing };

  const aiResult = await askWithLocalAI(questionText, options, type);

  const newQuestion = await Question.create({
    question: questionText,
    optionA: options.A,
    optionB: options.B,
    optionC: options.C,
    optionD: options.D,
    correctAnswer: aiResult.answer,
    explanation: aiResult.explanation,
    type,
    topic: type === 'Vocabulary' ? 'Vocabulary' : 'General',
  });

  return { source: 'ai', question: newQuestion };
};

export { getItemWithAI };
