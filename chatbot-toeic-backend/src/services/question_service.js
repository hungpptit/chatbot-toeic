import db from '../models/index.js';
import axios from 'axios';

const Question = db.Question;

// üéØ ƒê·ªïi t·ª´ OpenAI SDK ‚Üí d√πng Colab API tr·ª±c ti·∫øp
const COLAB_API_URL = 'https://4629-35-245-7-89.ngrok-free.app';


// üß† G·ªçi AI server do b·∫°n host (Colab/Local/Ngrok)
const askWithLocalAI = async (questionText, options) => {
  const prompt = `B·∫°n l√† tr·ª£ l√Ω ti·∫øng Anh. V·ªõi c√¢u h·ªèi sau, h√£y ch·ªçn ƒë√°p √°n ƒë√∫ng v√† gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát.

C√¢u h·ªèi: ${questionText}
A. ${options.A}
B. ${options.B}
C. ${options.C}
D. ${options.D}

‚ö†Ô∏è B·∫Øt bu·ªôc ƒë√∫ng ƒë·ªãnh d·∫°ng sau:
ƒê√°p √°n: A/B/C/D
Gi·∫£i th√≠ch: <gi·∫£i th√≠ch ng·∫Øn b·∫±ng ti·∫øng Vi·ªát>

Ch·ªâ in k·∫øt qu·∫£, kh√¥ng th√™m g√¨ kh√°c.`;

  try {
    const response = await axios.post(`${COLAB_API_URL}/generate`, {
      prompt,
      max_tokens: 200
    });

    const reply = response.data.result || '';
    console.log('üí¨ AI reply:', reply);

    const answerMatch = reply.match(/ƒê√°p √°n[:Ôºö]?\s*([A-D])/i);
    const explanationMatch = reply.match(/Gi·∫£i th√≠ch[:Ôºö]?\s*([\s\S]*)/i);

    const answer = answerMatch?.[1]?.toUpperCase() || 'D';
    const explanation = explanationMatch?.[1]?.trim() || reply.trim();

    return {
      answer,
      explanation,
    };
  } catch (err) {
    console.error('‚ùå Local AI API error:', {
    message: err.message,
    code: err.code,
    response: err.response?.data,
    status: err.response?.status,
    url: `${COLAB_API_URL}/generate`
  });
    throw new Error('L·ªói khi g·ªçi AI server n·ªôi b·ªô');
  }
};

// üîÅ H√†m ch√≠nh: l·∫•y t·ª´ DB ho·∫∑c h·ªèi AI n·∫øu ch∆∞a c√≥
const getQuestionWithAnswer = async ({ questionText, options }) => {
  try {
    const existing = await Question.findOne({ where: { question: questionText } });

    if (existing) {
      return {
        source: 'database',
        question: existing,
      };
    }

    const aiResult = await askWithLocalAI(questionText, options);

    const newQuestion = await Question.create({
      question: questionText,
      optionA: options.A,
      optionB: options.B,
      optionC: options.C,
      optionD: options.D,
      correctAnswer: aiResult.answer,
      explanation: aiResult.explanation,
      type: 'Part 5',
      topic: 'General',
    });

    return {
      source: 'ai',
      question: newQuestion,
    };
  } catch (err) {
    console.error('‚ùå Error in getQuestionWithAnswer:', err.message);
    throw err;
  }
};

export {
  getQuestionWithAnswer,
};
