import { initDb } from '../models/index.js'; // d√πng initDb ƒë√∫ng c√°ch

let db;
try {
  db = await initDb(); // ƒë·∫£m b·∫£o DB ƒë√£ kh·ªüi t·∫°o
} catch (err) {
  console.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o DB:", err);
}

const Conversation = db?.Conversation;
const Message = db?.Message;

/**
 * T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
 * @param {Object} data - { userId, title }
 */
const createConversation = async ({ userId, title }) => {
  try {
    console.log("üõ† Creating conversation with:", { userId, title });

    if (!Conversation || typeof Conversation.create !== 'function') {
      throw new Error('Model Conversation ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng');
    }

    const newConversation = await Conversation.create({
      userId,
      title,
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    return {
      code: 201,
      message: "T·∫°o cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng",
      data: newConversation,
    };
  } catch (error) {
    console.error("L·ªói t·∫°o conversation:", error);
    return { code: 500, message: "L·ªói server khi t·∫°o cu·ªôc tr√≤ chuy·ªán" };
  }
};

/**
 * L·∫•y danh s√°ch conversation theo userId
 */
const getConversationsByUser = async (userId) => {
  try {
    const conversations = await Conversation.findAll({
      where: { userId },
      order: [['updatedAt', 'DESC']],
    });

    return {
      code: 200,
      message: "L·∫•y danh s√°ch conversation th√†nh c√¥ng",
      data: conversations,
    };
  } catch (error) {
    console.error("L·ªói l·∫•y danh s√°ch conversation:", error);
    return { code: 500, message: "L·ªói server khi l·∫•y danh s√°ch" };
  }
};

/**
 * L·∫•y 1 conversation theo id
 */
const getConversationById = async (id) => {
  try {
    const conversation = await Conversation.findByPk(id, {
      include: [
        {
          model: Message,
          as: 'messages', // alias ph·∫£i tr√πng trong model
          attributes: ['id', 'role', 'content', 'createdAt'],
          order: [['createdAt', 'ASC']],
        },
      ],
    });

    if (!conversation) {
      return { code: 404, message: "Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán" };
    }

    return {
      code: 200,
      message: "L·∫•y cu·ªôc tr√≤ chuy·ªán th√†nh c√¥ng",
      data: conversation,
    };
  } catch (error) {
    console.error("L·ªói l·∫•y conversation:", error);
    return { code: 500, message: "L·ªói server khi l·∫•y cu·ªôc tr√≤ chuy·ªán" };
  }
};

export {
  createConversation,
  getConversationsByUser,
  getConversationById,
};
