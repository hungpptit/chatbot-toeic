import { getItemWithAI } from '../services/question_service.js';

const handleQuestionRequest = async (req, res) => {
  try {
    const { type, questionText, options, word } = req.body;

    // G·ªçi service x·ª≠ l√Ω logic b√™n trong
    let result;
    try {
      result = await getItemWithAI({ type, questionText, options, word });
      // console.log('üîé AI result:', result);  // ki·ªÉm tra ·ªü ƒë√¢y
    } catch (err) {
      console.error('‚ùå Error in getItemWithAI:', err.message);
      return res.status(400).json({ error: 'Kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c y√™u c·∫ßu', detail: err.message });
    }

    // Tr·∫£ v·ªÅ theo lo·∫°i k·∫øt qu·∫£
    if (result.question) {
      // C√¢u h·ªèi tr·∫Øc nghi·ªám
      return res.json({
        type: result.question.type,
        source: result.source,
        question: result.question.question,
        options: {
          A: result.question.optionA,
          B: result.question.optionB,
          C: result.question.optionC,
          D: result.question.optionD,
        },
        answer: result.question.correctAnswer,
        explanation: result.question.explanation,
      });
    }

    if (result.vocab) {
      // T·ª´ v·ª±ng
      return res.json({
        type: 'Vocabulary-Lookup',
        source: result.source,
        word: result.vocab.word,
        definition: result.vocab.definition,
        example: result.vocab.example,
        synonyms: result.vocab.synonyms?.map(s => s.synonym) || [],
        antonyms: result.vocab.antonyms?.map(a => a.antonym) || [],
         viExplanation: result.viExplanation || '', 
      });
    }

    if (result.type === 'Free') {
      // C√¢u h·ªèi t·ª± do
      return res.json({
        type: 'Free',
        source: 'ai',
        answer: result.answer,
      });
    }

    // N·∫øu kh√¥ng r∆°i v√†o tr∆∞·ªùng h·ª£p n√†o
    return res.status(400).json({ error: 'Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c lo·∫°i c√¢u h·ªèi.' });

  } catch (err) {
    console.error('‚ùå Error in handleQuestionRequest:', err.message);
    res.status(500).json({ error: 'Server error', detail: err.message });
  }
};

export { handleQuestionRequest };
