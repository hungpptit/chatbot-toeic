import './AdminTestAnalyticsPage.css';
import { useEffect } from 'react';
import { useState } from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import {getUserTestStatsAPI, getPartStatisticsByUserAPI, type PartStat, getAccuracyOverTimeAPI, type AccuracyPoint, getUserTestHistoryAPI, type UserTestHistoryItem} from '../../services/statisticalService';
import { getCurrentUser } from '../../services/authService';
// import {getAllPartsAPI, type Part, } from '../../services/adminTestService';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);
// Demo d·ªØ li·ªáu bi·ªÉu ƒë·ªì



const chartOptions = {
  responsive: true,
  plugins: {
    legend: {
      display: true,
      position: 'top' as const,
      labels: { color: '#ff6699', font: { size: 16 } },
    },
    tooltip: {
      callbacks: {
        label: (context: any) => `${context.parsed.y}%`,
      },
    },
  },
  scales: {
    y: {
      min: 0,
      max: 100,
      ticks: { color: '#888', font: { size: 14 } },
      grid: { color: '#eee' },
    },
    x: {
      ticks: { color: '#888', font: { size: 14 } },
      grid: { color: '#eee' },
    },
  },
};





export default function AdminTestAnalyticsPage() {
  const [activeSection, setActiveSection] = useState(0);
  const [stats, setStats] = useState({
    totalTests: 0,
    totalMinutes: 0,
    targetScore: null,
    sections: [] as PartStat[],
  });
  const [, setUser] = useState<{ id: string } | null>(null);
  const [sectionNames, setSectionNames] = useState<string[]>([]);
  const [chartPoints, setChartPoints] = useState<AccuracyPoint[]>([]);
  const [testHistory, setTestHistory] = useState<UserTestHistoryItem[]>([]);



  useEffect(() => {
    const fetchUserAndStats = async () => {
      try {
        const currentUser = await getCurrentUser();
        setUser(currentUser);

        if (currentUser?.id) {
          const [general, partStats] = await Promise.all([
            getUserTestStatsAPI(), // kh√¥ng c·∫ßn truy·ªÅn userId n·∫øu backend l·∫•y t·ª´ token
            getPartStatisticsByUserAPI(),
          ]);

          setStats({
            totalTests: general.totalAttempts,
            totalMinutes: Math.floor(general.totalTimeSeconds / 60),
            targetScore: null,
            sections: partStats.map(p => ({
              ...p,
              maxScoreTotal: 9 // gi·∫£ s·ª≠ m·ªói part t·ªëi ƒëa 9 ƒëi·ªÉm
            })),
          });

          // ƒê·ªìng b·ªô section name t·ª´ partStats n·∫øu b·∫°n kh√¥ng c·∫ßn g·ªçi getAllPartsAPI()
          setSectionNames(partStats.map(p => p.name));
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y user/stats:", err);
      }
    };

    fetchUserAndStats();
  }, []);

  useEffect(() => {
    const fetchChartData = async () => {
      try {
        const data = await getAccuracyOverTimeAPI(30);
        setChartPoints(data);
      } catch (error) {
        console.error('‚ùå L·ªói l·∫•y d·ªØ li·ªáu bi·ªÉu ƒë·ªì:', error);
      }
    };

    fetchChartData();
  }, []);

  useEffect(() => {
    const fetchTestHistory = async () => {
      try {
        const data = await getUserTestHistoryAPI();
        setTestHistory(data);
      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ ƒë·ªÅ thi:', error);
      }
    };

    fetchTestHistory();
  }, []);




  const currentPartName = sectionNames[activeSection];
  const currentStats = stats.sections.find(p => p.name === currentPartName);

  const chartData = {
    labels: chartPoints.map(p => p.date),
    datasets: [
      {
        label: '%Correct (30D)',
        data: chartPoints.map(p => p.accuracy),
        fill: false,
        borderColor: '#ff6699',
        backgroundColor: '#ff6699',
        tension: 0.3,
        pointBackgroundColor: '#ff6699',
        pointBorderColor: '#ff6699',
        pointRadius: 5,
        pointHoverRadius: 7,
      },
    ],
  };


  return (
    <div className="analytics-scroll-page">
      <div className="user-analytics-page">
        <div className="filter-row">
          <label>L·ªçc k·∫øt qu·∫£ theo ng√†y (t√≠nh t·ª´ b√†i thi cu·ªëi):</label>
          <select className="filter-select">
            <option>30 ng√†y</option>
            <option>7 ng√†y</option>
            <option>90 ng√†y</option>
          </select>
          <button className="btn-search">Search</button>
          <button className="btn-clear">Clear</button>
        </div>
        <div className="summary-row">
          <div className="summary-card">
            <div className="summary-icon">üìö</div>
            <div className="summary-title">S·ªë ƒë·ªÅ ƒë√£ l√†m</div>
            <div className="summary-value">{stats.totalTests}</div>
            <div className="summary-desc">ƒë·ªÅ thi</div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">‚è∞</div>
            <div className="summary-title">Th·ªùi gian luy·ªán thi</div>
            <div className="summary-value">{stats.totalMinutes}</div>
            <div className="summary-desc">ph√∫t</div>
          </div>
          <div className="summary-card">
            <div className="summary-icon">üéØ</div>
            <div className="summary-title">ƒêi·ªÉm m·ª•c ti√™u</div>
            <div className="summary-value summary-link">T·∫°o ngay</div>
          </div>
        </div>
        <div className="section-tabs">
          {sectionNames.map((name, idx) => (
            <button
              key={name}
              className={idx === activeSection ? 'tab active' : 'tab'}
              onClick={() => setActiveSection(idx)}
            >
              {name}
            </button>
          ))}
        </div>
        <div className="section-stats-row">
          <div className="section-card">
            <div className="section-title">S·ªë ƒë·ªÅ ƒë√£ l√†m</div>
            <div className="section-value">{currentStats?.done || 0}</div>
            <div className="section-desc">ƒë·ªÅ thi</div>
          </div>
          <div className="section-card">
            <div className="section-title">ƒê·ªô ch√≠nh x√°c (#ƒë√∫ng/#t·ªïng)</div>
            <div className="section-value">{currentStats?.accuracy || 0}%</div>
          </div>
          <div className="section-card">
            <div className="section-title">Th·ªùi gian trung b√¨nh</div>
            <div className="section-value">{currentStats?.avgTime || 0}</div>
          </div>
          <div className="section-card">
            <div className="section-title">ƒêi·ªÉm trung b√¨nh</div>
            <div className="section-value">{currentStats?.avgScore || 0}/9.0</div>
          </div>
          <div className="section-card">
            <div className="section-title">ƒêi·ªÉm cao nh·∫•t</div>
            <div className="section-value">{currentStats?.maxScore || 0}/{currentStats?.maxScoreTotal || 9}</div>
          </div>
        </div>

        {/* Chart card moved to a separate card below all other cards */}
        <div className="chart-card">
          <div className="chart-title">Th·ªëng k√™ k·∫øt qu·∫£ theo th·ªùi gian</div>
          <Line data={chartData} options={chartOptions} height={320} />
        </div>
        {/* Test list card below chart */}
        <div className="test-list-card">
          <div className="test-list-title">Danh s√°ch ƒë·ªÅ thi ƒë√£ l√†m:</div>
          <table className="test-list-table">
            <thead>
              <tr>
                <th>Ng√†y l√†m</th>
                <th>ƒê·ªÅ thi</th>
                <th>K·∫øt qu·∫£</th>
                <th>Th·ªùi gian l√†m b√†i</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              {testHistory.length === 0 ? (
                <tr>
                  <td colSpan={5}>Ch∆∞a c√≥ ƒë·ªÅ thi n√†o.</td>
                </tr>
              ) : (
                testHistory.map((item) => (
                  <tr key={item.userTestId}>
                    <td>{new Date(item.date).toLocaleDateString('vi-VN')}</td>
                    <td>{item.title} <span className="test-tag">Luy·ªán t·∫≠p</span></td>
                    <td>{item.correct}/{item.total}</td>
                    <td>{item.duration}</td>
                    <td>
                      <a
                        className="test-detail-link"
                        href={`/test-review-detail/${item.userTestId}`} // ho·∫∑c route ph√π h·ª£p
                      >
                        Xem chi ti·∫øt
                      </a>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}
