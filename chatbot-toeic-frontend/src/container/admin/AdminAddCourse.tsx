import { useState } from "react";
import { FaPlusCircle, FaBook, FaPuzzlePiece, FaQuestion, FaEdit,
  FaTrash, } from "react-icons/fa";
import "../../styles/adminAddCourse.css";
import {getAllCourseNamesAPI, insertCourseAPI,
    updateCourseNameAPI,
    deleteCourseByIdAPI
} from "../../services/testCourseService";

import{getAllQuestionTypesAPI,
    getAllPartsAPI,
    createPartAPI,
    createQuestionTypeAPI,
    deletePartAPI,
    deleteQuestionTypeAPI,
    updatePartNameAPI,
    updateQuestionTypeAPI
} from "../../services/adminTestService";
import { useEffect } from "react";

interface DataItem {
  id: number;
  name: string;
}

export default function AdminAddCourse() {
  const [courseName, setCourseName] = useState("");
  const [partName, setPartName] = useState("");
  const [questionType, setQuestionType] = useState("");

  const [courses, setCourses] = useState<DataItem[]>([]);
  const [parts, setParts] = useState<DataItem[]>([]);
  const [questionTypes, setQuestionTypes] = useState<DataItem[]>([]);

    const handleAddCourse = async () => {
        if (!courseName.trim()) return alert("Vui l√≤ng nh·∫≠p t√™n kh√≥a h·ªçc.");

        try {
            const newCourse = await insertCourseAPI(courseName.trim()); // G·ªçi API

            setCourses((prev) => [...prev, newCourse]); // C·∫≠p nh·∫≠t UI
            setCourseName("");
            alert(`‚úÖ ƒê√£ th√™m kh√≥a h·ªçc: ${newCourse.name}`);
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m kh√≥a h·ªçc:", error);
            alert("ƒê√£ x·∫£y ra l·ªói khi th√™m kh√≥a h·ªçc.");
        }
    };

    const handleDeleteCourse = async (id: number) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√≥a h·ªçc n√†y?")) return;

        try {
            await deleteCourseByIdAPI(id);
            setCourses((prev) => prev.filter((c) => c.id !== id));
            alert("üóëÔ∏è ƒê√£ x√≥a kh√≥a h·ªçc.");
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a:", error);
            alert("X√≥a th·∫•t b·∫°i.");
        }
        };

    const handleUpdateCourse = async (id: number) => {
        const currentCourse = courses.find((c) => c.id === id);
        if (!currentCourse) return;

        const newName = window.prompt("Nh·∫≠p t√™n m·ªõi cho kh√≥a h·ªçc:", currentCourse.name);
        if (!newName || !newName.trim()) return;

        try {
            const updated = await updateCourseNameAPI(id, newName.trim());
            setCourses((prev) =>
            prev.map((c) => (c.id === id ? { ...c, name: updated.name } : c))
            );
            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n kh√≥a h·ªçc.");
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
            alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i.");
        }
        };

    const handleAddPart = async () => {
        if (!partName.trim()) return alert("Vui l√≤ng nh·∫≠p t√™n part.");

        try {
            const newPart = await createPartAPI(partName.trim());
            setParts((prev) => [...prev, newPart]);
            setPartName("");
            alert(`‚úÖ ƒê√£ th√™m part: ${newPart.name}`);
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m part:", error);
            alert("Th√™m part th·∫•t b·∫°i.");
        }
    };

    const handleDeletePart = async (id: number) => {
        if (!window.confirm("X√≥a part n√†y?")) return;

        try {
            await deletePartAPI(id);
            setParts((prev) => prev.filter((p) => p.id !== id));
            alert("üóëÔ∏è ƒê√£ x√≥a part.");
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a part:", error);
            alert("X√≥a part th·∫•t b·∫°i.");
        }
    };
    const handleUpdatePart = async (id: number) => {
        const current = parts.find((p) => p.id === id);
        if (!current) return;

        const newName = window.prompt("T√™n m·ªõi cho part:", current.name);
        if (!newName || !newName.trim()) return;

        try {
            const updated = await updatePartNameAPI(id, newName.trim());
            setParts((prev) =>
            prev.map((p) => (p.id === id ? { ...p, name: updated.name } : p))
            );
            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t part.");
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t part:", error);
            alert("C·∫≠p nh·∫≠t part th·∫•t b·∫°i.");
        }
    };

    const handleAddQuestionType = async () => {
        if (!questionType.trim()) return alert("Vui l√≤ng nh·∫≠p lo·∫°i c√¢u h·ªèi.");

        try {
            const newQT = await createQuestionTypeAPI(questionType.trim());
            setQuestionTypes((prev) => [...prev, newQT]);
            setQuestionType("");
            alert(`‚úÖ ƒê√£ th√™m lo·∫°i c√¢u h·ªèi: ${newQT.name}`);
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m question type:", error);
            alert("Th√™m th·∫•t b·∫°i.");
        }
    };

    const handleDeleteQuestionType = async (id: number) => {
        if (!window.confirm("X√≥a lo·∫°i c√¢u h·ªèi n√†y?")) return;

        try {
            await deleteQuestionTypeAPI(id);
            setQuestionTypes((prev) => prev.filter((qt) => qt.id !== id));
            alert("üóëÔ∏è ƒê√£ x√≥a lo·∫°i c√¢u h·ªèi.");
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a:", error);
            alert("X√≥a th·∫•t b·∫°i.");
        }
    };


    const handleUpdateQuestionType = async (id: number) => {
        const current = questionTypes.find((qt) => qt.id === id);
        if (!current) return;

        const newName = window.prompt("T√™n m·ªõi cho lo·∫°i c√¢u h·ªèi:", current.name);
        if (!newName || !newName.trim()) return;

        try {
            const updated = await updateQuestionTypeAPI(id, newName.trim());
            setQuestionTypes((prev) =>
            prev.map((qt) => (qt.id === id ? { ...qt, name: updated.name } : qt))
            );
            alert("‚úÖ ƒê√£ c·∫≠p nh·∫≠t question type.");
        } catch (error) {
            console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
            alert("C·∫≠p nh·∫≠t th·∫•t b·∫°i.");
        }
    };

    useEffect(() => {
    const fetchAll = async () => {
        try {
        const [courseData, partData, questionTypeData] = await Promise.all([
            getAllCourseNamesAPI(),
            getAllPartsAPI(),
            getAllQuestionTypesAPI()
        ]);
        setCourses(courseData);
        setParts(partData);
        setQuestionTypes(questionTypeData);
        } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
        }
    };
    fetchAll();
    }, []);


   return (
    <div className="admin-add-course-container">
      <h2>
        <FaPlusCircle /> Th√™m m·ªõi d·ªØ li·ªáu
      </h2>

      {/* Box 1: Th√™m kh√≥a h·ªçc */}
      <div className="admin-box">
        <h3>
          <FaBook /> Th√™m Kh√≥a H·ªçc
        </h3>
        <input
          type="text"
          placeholder="T√™n kh√≥a h·ªçc"
          value={courseName}
          onChange={(e) => setCourseName(e.target.value)}
        />
        <button onClick={handleAddCourse}>
          <span style={{ marginRight: "6px" }}>
            <FaPlusCircle />
          </span>
          Th√™m kh√≥a h·ªçc
        </button>

        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>T√™n Kh√≥a H·ªçc</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {courses.map((course) => (
              <tr key={course.id}>
                <td>{course.id}</td>
                <td>{course.name}</td>
                <td className="action-buttons">
                  <button onClick={() => handleUpdateCourse(course.id)}>
                    <FaEdit />
                  </button>
                  <button onClick={() => handleDeleteCourse(course.id)}>
                    <FaTrash />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Box 2: Th√™m Part */}
      <div className="admin-box">
        <h3>
          <FaPuzzlePiece /> Th√™m Part
        </h3>
        <input
          type="text"
          placeholder="T√™n part"
          value={partName}
          onChange={(e) => setPartName(e.target.value)}
        />
        <button onClick={handleAddPart}>
          <span style={{ marginRight: "6px" }}>
            <FaPlusCircle />
          </span>
          Th√™m part
        </button>

        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>T√™n Part</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {parts.map((part) => (
              <tr key={part.id}>
                <td>{part.id}</td>
                <td>{part.name}</td>
                <td className="action-buttons">
                  <button onClick={() => handleUpdatePart(part.id)}>
                    <FaEdit />
                  </button>
                  <button onClick={() => handleDeletePart(part.id)}>
                    <FaTrash />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Box 3: Th√™m Question Type */}
      <div className="admin-box">
        <h3>
          <FaQuestion /> Th√™m Question Type
        </h3>
        <input
          type="text"
          placeholder="Lo·∫°i c√¢u h·ªèi"
          value={questionType}
          onChange={(e) => setQuestionType(e.target.value)}
        />
        <button onClick={handleAddQuestionType}>
          <span style={{ marginRight: "6px" }}>
            <FaPlusCircle />
          </span>
          Th√™m question type
        </button>

        <table className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Lo·∫°i c√¢u h·ªèi</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {questionTypes.map((qt) => (
              <tr key={qt.id}>
                <td>{qt.id}</td>
                <td>{qt.name}</td>
                <td className="action-buttons">
                  <button onClick={() => handleUpdateQuestionType(qt.id)}>
                    <FaEdit />
                  </button>
                  <button onClick={() => handleDeleteQuestionType(qt.id)}>
                    <FaTrash />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}